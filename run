flex -o lex.yy.c -l test.l
bison -o test.tab.c -vd test.y
gcc -o result lex.yy.c test.tab.c -lm -ll


#include "test.tab.h"
#define YY_DECL int yylex()
 |  calculation error        '\n' {yyerrok; printf(" ERREUR SYNTAXE \n");}



line: T_NEWLINE
    | mixed_expression T_NEWLINE { printf("\tResult: %f\n", $1);}
    | expression T_NEWLINE { printf("\tResult: %i\n", $1); } 
    | T_QUIT T_NEWLINE { printf("bye!\n"); exit(0); }
;

mixed_expression: T_FLOAT                 		 { $$ = $1; }
	  | mixed_expression T_PLUS mixed_expression	 { $$ = $1 + $3; }
	  | mixed_expression T_MOINS mixed_expression	 { $$ = $1 - $3; }
	  | mixed_expression T_MULTIPL mixed_expression { $$ = $1 * $3; }
	  | mixed_expression T_DIV mixed_expression	 { $$ = $1 / $3; }
	  | '(' mixed_expression ')'		 { $$ = $2; }
	  | expression T_PLUS mixed_expression	 	 { $$ = $1 + $3; }
	  | expression T_MOINS mixed_expression	 	 { $$ = $1 - $3; }
	  | expression T_MULTIPL mixed_expression 	 { $$ = $1 * $3; }
	  | expression T_DIV mixed_expression	 { $$ = $1 / $3; }
	  | mixed_expression T_PLUS expression	 	 { $$ = $1 + $3; }
	  | mixed_expression T_MOINS expression	 	 { $$ = $1 - $3; }
	  | mixed_expression T_MULTIPL expression 	 { $$ = $1 * $3; }
	  | mixed_expression T_DIV  expression	 { $$ = $1 / $3; }
	  | expression T_DIV  expression		 { $$ = $1 / (float)$3; }
;

expression: T_INT				{ $$ = $1; }
	  | expression T_PLUS expression	{ $$ = $1 + $3; }
	  | expression T_MOINS expression	{ $$ = $1 - $3; }
	  | expression T_MULTIPL expression	{ $$ = $1 * $3; }
| '(' expression ')' { $$ = $2; }
;

Expr : '{' '}'          { //$$=Empty_set();
                           printf("ensemble vide");}
     | '{' E_list '}'   {//$$=$2;
                    printf("ensemble \n"); }
     | Expr T_UNION Expr  {//$$=Union_set($1,$3);
 printf("UNION \n");}
     | Expr T_INTER Expr  { //$$=Inter_set($1,$3);
printf("intersection \n");}
     | Expr T_DIFF Expr   { //$$=Diff_set($1,$3);
printf(" difference \n");}
     | T_COMPL Expr        {//$$=Comp_set($2);
printf("complmentaire \n");}
     | IDENT              {  //$$=Var[$1];
   printf("affichage ! \n");}

